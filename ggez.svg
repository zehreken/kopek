<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="565.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="565.00"> </text><svg id="frames" x="10" width="1180"><g><title>123145356464128 (1,402 samples, 55.48%)</title><rect x="0.0000%" y="517" width="55.4808%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="527.50">123145356464128</text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;N,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;N,R,C&gt;&gt;::Buffer&gt;&gt;::zeros_generic (8 samples, 0.32%)</title><rect x="55.7578%" y="213" width="0.3166%" height="15" fill="rgb(217,0,24)"/><text x="56.0078%" y="223.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;N,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;N,R,C&gt;&gt;::Buffer&gt;&gt;::from_element_generic (8 samples, 0.32%)</title><rect x="55.7578%" y="197" width="0.3166%" height="15" fill="rgb(221,193,54)"/><text x="56.0078%" y="207.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;N,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;N,R,C&gt;&gt;::Buffer&gt;&gt;::from_iterator_generic (8 samples, 0.32%)</title><rect x="55.7578%" y="181" width="0.3166%" height="15" fill="rgb(248,212,6)"/><text x="56.0078%" y="191.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;N,R,C&gt;&gt;::allocate_from_iterator (8 samples, 0.32%)</title><rect x="55.7578%" y="165" width="0.3166%" height="15" fill="rgb(208,68,35)"/><text x="56.0078%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.24%)</title><rect x="55.8370%" y="149" width="0.2374%" height="15" fill="rgb(232,128,0)"/><text x="56.0870%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (6 samples, 0.24%)</title><rect x="55.8370%" y="133" width="0.2374%" height="15" fill="rgb(207,160,47)"/><text x="56.0870%" y="143.50"></text></g><g><title>nalgebra::base::construction::&lt;impl num_traits::identities::One for nalgebra::base::matrix::Matrix&lt;N,D,D,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;N,D,D&gt;&gt;::Buffer&gt;&gt;::one (10 samples, 0.40%)</title><rect x="55.7182%" y="277" width="0.3957%" height="15" fill="rgb(228,23,34)"/><text x="55.9682%" y="287.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;N,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;N,R,C&gt;&gt;::Buffer&gt;&gt;::identity (10 samples, 0.40%)</title><rect x="55.7182%" y="261" width="0.3957%" height="15" fill="rgb(218,30,26)"/><text x="55.9682%" y="271.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;N,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;N,R,C&gt;&gt;::Buffer&gt;&gt;::identity_generic (9 samples, 0.36%)</title><rect x="55.7578%" y="245" width="0.3562%" height="15" fill="rgb(220,122,19)"/><text x="56.0078%" y="255.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;N,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;N,R,C&gt;&gt;::Buffer&gt;&gt;::from_diagonal_element_generic (9 samples, 0.36%)</title><rect x="55.7578%" y="229" width="0.3562%" height="15" fill="rgb(250,228,42)"/><text x="56.0078%" y="239.50"></text></g><g><title>nalgebra::base::cg::&lt;impl nalgebra::base::matrix::Matrix&lt;N,D,D,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;N,D,D&gt;&gt;::Buffer&gt;&gt;::new_translation (12 samples, 0.47%)</title><rect x="55.7182%" y="293" width="0.4749%" height="15" fill="rgb(240,193,28)"/><text x="55.9682%" y="303.50"></text></g><g><title>nalgebra::geometry::rotation::Rotation&lt;N,D&gt;::to_homogeneous (3 samples, 0.12%)</title><rect x="56.1931%" y="277" width="0.1187%" height="15" fill="rgb(216,20,37)"/><text x="56.4431%" y="287.50"></text></g><g><title>nalgebra::base::cg::&lt;impl nalgebra::base::matrix::Matrix&lt;N,nalgebra::base::dimension::U4,nalgebra::base::dimension::U4,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;N,nalgebra::base::dimension::U4,nalgebra::base::dimension::U4&gt;&gt;::Buffer&gt;&gt;::new_rotation (5 samples, 0.20%)</title><rect x="56.1931%" y="293" width="0.1979%" height="15" fill="rgb(206,188,39)"/><text x="56.4431%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.12%)</title><rect x="56.6680%" y="213" width="0.1187%" height="15" fill="rgb(217,207,13)"/><text x="56.9180%" y="223.50"></text></g><g><title>&lt;nalgebra::base::matrix_slice::SliceStorage&lt;N,R,C,RStride,CStride&gt; as nalgebra::base::storage::Storage&lt;N,R,C&gt;&gt;::as_slice (11 samples, 0.44%)</title><rect x="56.9054%" y="197" width="0.4353%" height="15" fill="rgb(231,73,38)"/><text x="57.1554%" y="207.50"></text></g><g><title>nalgebra::base::storage::Storage::linear_index (5 samples, 0.20%)</title><rect x="57.1429%" y="181" width="0.1979%" height="15" fill="rgb(225,20,46)"/><text x="57.3929%" y="191.50"></text></g><g><title>&lt;nalgebra::base::dimension::U4 as nalgebra::base::dimension::Dim&gt;::value (5 samples, 0.20%)</title><rect x="57.1429%" y="165" width="0.1979%" height="15" fill="rgb(210,31,41)"/><text x="57.3929%" y="175.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (5 samples, 0.20%)</title><rect x="57.1429%" y="149" width="0.1979%" height="15" fill="rgb(221,200,47)"/><text x="57.3929%" y="159.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (3 samples, 0.12%)</title><rect x="57.2220%" y="133" width="0.1187%" height="15" fill="rgb(226,26,5)"/><text x="57.4720%" y="143.50"></text></g><g><title>&lt;nalgebra::base::dimension::U4 as nalgebra::base::dimension::Dim&gt;::value (5 samples, 0.20%)</title><rect x="57.3803%" y="181" width="0.1979%" height="15" fill="rgb(249,33,26)"/><text x="57.6303%" y="191.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (5 samples, 0.20%)</title><rect x="57.3803%" y="165" width="0.1979%" height="15" fill="rgb(235,183,28)"/><text x="57.6303%" y="175.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (5 samples, 0.20%)</title><rect x="57.3803%" y="149" width="0.1979%" height="15" fill="rgb(221,5,38)"/><text x="57.6303%" y="159.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (4 samples, 0.16%)</title><rect x="57.4199%" y="133" width="0.1583%" height="15" fill="rgb(247,18,42)"/><text x="57.6699%" y="143.50"></text></g><g><title>&lt;nalgebra::base::matrix_slice::SliceStorageMut&lt;N,R,C,RStride,CStride&gt; as nalgebra::base::storage::StorageMut&lt;N,R,C&gt;&gt;::as_mut_slice (10 samples, 0.40%)</title><rect x="57.3803%" y="197" width="0.3957%" height="15" fill="rgb(241,131,45)"/><text x="57.6303%" y="207.50"></text></g><g><title>nalgebra::base::storage::Storage::linear_index (4 samples, 0.16%)</title><rect x="57.6177%" y="181" width="0.1583%" height="15" fill="rgb(249,31,29)"/><text x="57.8677%" y="191.50"></text></g><g><title>&lt;nalgebra::base::dimension::U4 as nalgebra::base::dimension::Dim&gt;::value (4 samples, 0.16%)</title><rect x="57.6177%" y="165" width="0.1583%" height="15" fill="rgb(225,111,53)"/><text x="57.8677%" y="175.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (4 samples, 0.16%)</title><rect x="57.6177%" y="149" width="0.1583%" height="15" fill="rgb(238,160,17)"/><text x="57.8677%" y="159.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.16%)</title><rect x="57.7760%" y="181" width="0.1583%" height="15" fill="rgb(214,148,48)"/><text x="58.0260%" y="191.50"></text></g><g><title>nalgebra::base::blas::array_ax (5 samples, 0.20%)</title><rect x="57.7760%" y="197" width="0.1979%" height="15" fill="rgb(232,36,49)"/><text x="58.0260%" y="207.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6 samples, 0.24%)</title><rect x="58.2113%" y="181" width="0.2374%" height="15" fill="rgb(209,103,24)"/><text x="58.4613%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (3 samples, 0.12%)</title><rect x="58.4488%" y="181" width="0.1187%" height="15" fill="rgb(229,88,8)"/><text x="58.6988%" y="191.50"></text></g><g><title>nalgebra::base::blas::array_axpy (17 samples, 0.67%)</title><rect x="57.9739%" y="197" width="0.6727%" height="15" fill="rgb(213,181,19)"/><text x="58.2239%" y="207.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;N,R,C,S&gt;::nrows (8 samples, 0.32%)</title><rect x="58.6466%" y="197" width="0.3166%" height="15" fill="rgb(254,191,54)"/><text x="58.8966%" y="207.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;N,R,C,S&gt;::shape (8 samples, 0.32%)</title><rect x="58.6466%" y="181" width="0.3166%" height="15" fill="rgb(241,83,37)"/><text x="58.8966%" y="191.50"></text></g><g><title>&lt;nalgebra::base::dimension::U4 as nalgebra::base::dimension::Dim&gt;::value (7 samples, 0.28%)</title><rect x="58.6862%" y="165" width="0.2770%" height="15" fill="rgb(233,36,39)"/><text x="58.9362%" y="175.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (5 samples, 0.20%)</title><rect x="58.7653%" y="149" width="0.1979%" height="15" fill="rgb(226,3,54)"/><text x="59.0153%" y="159.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (4 samples, 0.16%)</title><rect x="58.8049%" y="133" width="0.1583%" height="15" fill="rgb(245,192,40)"/><text x="59.0549%" y="143.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;N,D,nalgebra::base::dimension::U1,S&gt;&gt;::axpy (60 samples, 2.37%)</title><rect x="56.7867%" y="213" width="2.3744%" height="15" fill="rgb(238,167,29)"/><text x="57.0367%" y="223.50">na..</text></g><g><title>nalgebra::base::matrix::Matrix&lt;N,R,C,S&gt;::strides (5 samples, 0.20%)</title><rect x="58.9632%" y="197" width="0.1979%" height="15" fill="rgb(232,182,51)"/><text x="59.2132%" y="207.50"></text></g><g><title>&lt;nalgebra::base::dimension::U4 as nalgebra::base::dimension::Dim&gt;::value (4 samples, 0.16%)</title><rect x="59.0028%" y="181" width="0.1583%" height="15" fill="rgb(231,60,39)"/><text x="59.2528%" y="191.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (4 samples, 0.16%)</title><rect x="59.0028%" y="165" width="0.1583%" height="15" fill="rgb(208,69,12)"/><text x="59.2528%" y="175.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (4 samples, 0.16%)</title><rect x="59.0028%" y="149" width="0.1583%" height="15" fill="rgb(235,93,37)"/><text x="59.2528%" y="159.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;N,R,C,S&gt;::nrows (3 samples, 0.12%)</title><rect x="59.1611%" y="197" width="0.1187%" height="15" fill="rgb(213,116,39)"/><text x="59.4111%" y="207.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;N,R,C,S&gt;::shape (3 samples, 0.12%)</title><rect x="59.1611%" y="181" width="0.1187%" height="15" fill="rgb(222,207,29)"/><text x="59.4111%" y="191.50"></text></g><g><title>&lt;nalgebra::base::dimension::U4 as nalgebra::base::dimension::Dim&gt;::value (3 samples, 0.12%)</title><rect x="59.1611%" y="165" width="0.1187%" height="15" fill="rgb(206,96,30)"/><text x="59.4111%" y="175.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (3 samples, 0.12%)</title><rect x="59.3194%" y="133" width="0.1187%" height="15" fill="rgb(218,138,4)"/><text x="59.5694%" y="143.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;N,R,C,S&gt;::strides (5 samples, 0.20%)</title><rect x="59.2798%" y="197" width="0.1979%" height="15" fill="rgb(250,191,14)"/><text x="59.5298%" y="207.50"></text></g><g><title>&lt;nalgebra::base::dimension::U4 as nalgebra::base::dimension::Dim&gt;::value (4 samples, 0.16%)</title><rect x="59.3194%" y="181" width="0.1583%" height="15" fill="rgb(239,60,40)"/><text x="59.5694%" y="191.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (4 samples, 0.16%)</title><rect x="59.3194%" y="165" width="0.1583%" height="15" fill="rgb(206,27,48)"/><text x="59.5694%" y="175.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (4 samples, 0.16%)</title><rect x="59.3194%" y="149" width="0.1583%" height="15" fill="rgb(225,35,8)"/><text x="59.5694%" y="159.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;N,D,nalgebra::base::dimension::U1,S&gt;::vget_unchecked (9 samples, 0.36%)</title><rect x="59.1611%" y="213" width="0.3562%" height="15" fill="rgb(250,213,24)"/><text x="59.4111%" y="223.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;N,R,C,S&gt;::shape (3 samples, 0.12%)</title><rect x="59.5964%" y="213" width="0.1187%" height="15" fill="rgb(247,123,22)"/><text x="59.8464%" y="223.50"></text></g><g><title>&lt;nalgebra::base::dimension::U4 as nalgebra::base::dimension::Dim&gt;::value (3 samples, 0.12%)</title><rect x="59.5964%" y="197" width="0.1187%" height="15" fill="rgb(231,138,38)"/><text x="59.8464%" y="207.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (3 samples, 0.12%)</title><rect x="59.5964%" y="181" width="0.1187%" height="15" fill="rgb(231,145,46)"/><text x="59.8464%" y="191.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;N,D,nalgebra::base::dimension::U1,S&gt;&gt;::gemv (93 samples, 3.68%)</title><rect x="56.5493%" y="229" width="3.6803%" height="15" fill="rgb(251,118,11)"/><text x="56.7993%" y="239.50">nalg..</text></g><g><title>nalgebra::base::matrix_slice::&lt;impl nalgebra::base::matrix::Matrix&lt;N,R,C,S&gt;&gt;::column (13 samples, 0.51%)</title><rect x="59.7151%" y="213" width="0.5144%" height="15" fill="rgb(217,147,25)"/><text x="59.9651%" y="223.50"></text></g><g><title>nalgebra::base::matrix_slice::&lt;impl nalgebra::base::matrix::Matrix&lt;N,R,C,S&gt;&gt;::fixed_columns (11 samples, 0.44%)</title><rect x="59.7942%" y="197" width="0.4353%" height="15" fill="rgb(247,81,37)"/><text x="60.0442%" y="207.50"></text></g><g><title>nalgebra::base::matrix_slice::&lt;impl nalgebra::base::matrix::Matrix&lt;N,R,C,S&gt;&gt;::columns_generic (10 samples, 0.40%)</title><rect x="59.8338%" y="181" width="0.3957%" height="15" fill="rgb(209,12,38)"/><text x="60.0838%" y="191.50"></text></g><g><title>nalgebra::base::matrix_slice::SliceStorage&lt;N,R,C,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic&gt;::new_unchecked (6 samples, 0.24%)</title><rect x="59.9921%" y="165" width="0.2374%" height="15" fill="rgb(227,1,9)"/><text x="60.2421%" y="175.50"></text></g><g><title>nalgebra::base::matrix_slice::SliceStorage&lt;N,R,C,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic&gt;::new_with_strides_unchecked (5 samples, 0.20%)</title><rect x="60.0317%" y="149" width="0.1979%" height="15" fill="rgb(248,47,43)"/><text x="60.2817%" y="159.50"></text></g><g><title>nalgebra::base::storage::Storage::get_address_unchecked (5 samples, 0.20%)</title><rect x="60.0317%" y="133" width="0.1979%" height="15" fill="rgb(221,10,30)"/><text x="60.2817%" y="143.50"></text></g><g><title>nalgebra::base::storage::Storage::linear_index (3 samples, 0.12%)</title><rect x="60.1108%" y="117" width="0.1187%" height="15" fill="rgb(210,229,1)"/><text x="60.3608%" y="127.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (120 samples, 4.75%)</title><rect x="55.6391%" y="357" width="4.7487%" height="15" fill="rgb(222,148,37)"/><text x="55.8891%" y="367.50">&lt;T as ..</text></g><g><title>&lt;ggez::graphics::drawparam::DrawTransform as core::convert::From&lt;ggez::graphics::drawparam::DrawParam&gt;&gt;::from (120 samples, 4.75%)</title><rect x="55.6391%" y="341" width="4.7487%" height="15" fill="rgb(234,67,33)"/><text x="55.8891%" y="351.50">&lt;ggez:..</text></g><g><title>ggez::graphics::drawparam::DrawParam::to_matrix (120 samples, 4.75%)</title><rect x="55.6391%" y="325" width="4.7487%" height="15" fill="rgb(247,98,35)"/><text x="55.8891%" y="335.50">ggez::..</text></g><g><title>ggez::graphics::drawparam::DrawParam::to_na_matrix (120 samples, 4.75%)</title><rect x="55.6391%" y="309" width="4.7487%" height="15" fill="rgb(247,138,52)"/><text x="55.8891%" y="319.50">ggez::..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;nalgebra::base::matrix::Matrix&lt;N,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;N,R1,C1,SA&gt;&gt;::mul (99 samples, 3.92%)</title><rect x="56.4701%" y="293" width="3.9177%" height="15" fill="rgb(213,79,30)"/><text x="56.7201%" y="303.50">nalg..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;N,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;N,R1,C1,SA&gt;&gt;::mul (99 samples, 3.92%)</title><rect x="56.4701%" y="277" width="3.9177%" height="15" fill="rgb(246,177,23)"/><text x="56.7201%" y="287.50">nalg..</text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;N,R1,C1,SA&gt;&gt;::mul_to (99 samples, 3.92%)</title><rect x="56.4701%" y="261" width="3.9177%" height="15" fill="rgb(230,62,27)"/><text x="56.7201%" y="271.50">nalg..</text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;N,R1,C1,S&gt;&gt;::gemm (97 samples, 3.84%)</title><rect x="56.5493%" y="245" width="3.8385%" height="15" fill="rgb(216,154,8)"/><text x="56.7993%" y="255.50">nalg..</text></g><g><title>nalgebra::base::matrix_slice::&lt;impl nalgebra::base::matrix::Matrix&lt;N,R,C,S&gt;&gt;::column (3 samples, 0.12%)</title><rect x="60.2691%" y="229" width="0.1187%" height="15" fill="rgb(244,35,45)"/><text x="60.5191%" y="239.50"></text></g><g><title>nalgebra::base::matrix_slice::&lt;impl nalgebra::base::matrix::Matrix&lt;N,R,C,S&gt;&gt;::fixed_columns (3 samples, 0.12%)</title><rect x="60.2691%" y="213" width="0.1187%" height="15" fill="rgb(251,115,12)"/><text x="60.5191%" y="223.50"></text></g><g><title>nalgebra::base::matrix_slice::&lt;impl nalgebra::base::matrix::Matrix&lt;N,R,C,S&gt;&gt;::columns_generic (3 samples, 0.12%)</title><rect x="60.2691%" y="197" width="0.1187%" height="15" fill="rgb(240,54,50)"/><text x="60.5191%" y="207.50"></text></g><g><title>&lt;gfx_device_gl::command::CommandBuffer as gfx_core::command::Buffer&lt;gfx_device_gl::Resources&gt;&gt;::bind_pipeline_state (4 samples, 0.16%)</title><rect x="60.5461%" y="309" width="0.1583%" height="15" fill="rgb(233,84,52)"/><text x="60.7961%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (3 samples, 0.12%)</title><rect x="60.7440%" y="293" width="0.1187%" height="15" fill="rgb(207,117,47)"/><text x="60.9940%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.12%)</title><rect x="60.7440%" y="277" width="0.1187%" height="15" fill="rgb(249,43,39)"/><text x="60.9940%" y="287.50"></text></g><g><title>&lt;gfx_device_gl::command::CommandBuffer as gfx_core::command::Buffer&lt;gfx_device_gl::Resources&gt;&gt;::bind_pixel_targets (5 samples, 0.20%)</title><rect x="60.7044%" y="309" width="0.1979%" height="15" fill="rgb(209,38,44)"/><text x="60.9544%" y="319.50"></text></g><g><title>&lt;gfx_device_gl::command::CommandBuffer as gfx_core::command::Buffer&lt;gfx_device_gl::Resources&gt;&gt;::set_scissor (3 samples, 0.12%)</title><rect x="60.9418%" y="309" width="0.1187%" height="15" fill="rgb(236,212,23)"/><text x="61.1918%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (3 samples, 0.12%)</title><rect x="60.9418%" y="293" width="0.1187%" height="15" fill="rgb(242,79,21)"/><text x="61.1918%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.12%)</title><rect x="60.9418%" y="277" width="0.1187%" height="15" fill="rgb(211,96,35)"/><text x="61.1918%" y="287.50"></text></g><g><title>gfx::encoder::Encoder&lt;R,C&gt;::draw (17 samples, 0.67%)</title><rect x="60.5461%" y="325" width="0.6727%" height="15" fill="rgb(253,215,40)"/><text x="60.7961%" y="335.50"></text></g><g><title>ggez::graphics::draw (142 samples, 5.62%)</title><rect x="55.6391%" y="389" width="5.6193%" height="15" fill="rgb(211,81,21)"/><text x="55.8891%" y="399.50">ggez::g..</text></g><g><title>&lt;ggez::graphics::mesh::Mesh as ggez::graphics::Drawable&gt;::draw (142 samples, 5.62%)</title><rect x="55.6391%" y="373" width="5.6193%" height="15" fill="rgb(208,190,38)"/><text x="55.8891%" y="383.50">&lt;ggez::..</text></g><g><title>ggez::graphics::context::GraphicsContextGeneric&lt;B&gt;::draw (18 samples, 0.71%)</title><rect x="60.5461%" y="357" width="0.7123%" height="15" fill="rgb(235,213,38)"/><text x="60.7961%" y="367.50"></text></g><g><title>&lt;ggez::graphics::shader::ShaderProgram&lt;Spec,C&gt; as ggez::graphics::shader::ShaderHandle&lt;Spec&gt;&gt;::draw (18 samples, 0.71%)</title><rect x="60.5461%" y="341" width="0.7123%" height="15" fill="rgb(237,122,38)"/><text x="60.7961%" y="351.50"></text></g><g><title>&lt;gfx_core::handle::Manager&lt;R&gt; as gfx_core::handle::Producer&lt;R&gt;&gt;::clean_with (3 samples, 0.12%)</title><rect x="61.2584%" y="357" width="0.1187%" height="15" fill="rgb(244,218,35)"/><text x="61.5084%" y="367.50"></text></g><g><title>&lt;gfx_core::handle::Manager&lt;R&gt; as gfx_core::handle::Producer&lt;R&gt;&gt;::clean_with::clean_vec (3 samples, 0.12%)</title><rect x="61.2584%" y="341" width="0.1187%" height="15" fill="rgb(240,68,47)"/><text x="61.5084%" y="351.50"></text></g><g><title>&lt;gfx_device_gl::Device as gfx_core::Device&gt;::cleanup (5 samples, 0.20%)</title><rect x="61.2584%" y="373" width="0.1979%" height="15" fill="rgb(210,16,53)"/><text x="61.5084%" y="383.50"></text></g><g><title>gfx_device_gl::Device::before_submit (3 samples, 0.12%)</title><rect x="61.5354%" y="325" width="0.1187%" height="15" fill="rgb(235,124,12)"/><text x="61.7854%" y="335.50"></text></g><g><title>gfx_core::command::AccessInfo&lt;R&gt;::take_accesses (3 samples, 0.12%)</title><rect x="61.5354%" y="309" width="0.1187%" height="15" fill="rgb(224,169,11)"/><text x="61.7854%" y="319.50"></text></g><g><title>gfx_core::command::AccessInfo&lt;R&gt;::mapped_reads (3 samples, 0.12%)</title><rect x="61.5354%" y="293" width="0.1187%" height="15" fill="rgb(250,166,2)"/><text x="61.7854%" y="303.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (3 samples, 0.12%)</title><rect x="61.5354%" y="277" width="0.1187%" height="15" fill="rgb(242,216,29)"/><text x="61.7854%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::keys (3 samples, 0.12%)</title><rect x="61.5354%" y="261" width="0.1187%" height="15" fill="rgb(230,116,27)"/><text x="61.7854%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (3 samples, 0.12%)</title><rect x="61.5354%" y="245" width="0.1187%" height="15" fill="rgb(228,99,48)"/><text x="61.7854%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::iter (3 samples, 0.12%)</title><rect x="61.5354%" y="229" width="0.1187%" height="15" fill="rgb(253,11,6)"/><text x="61.7854%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter (3 samples, 0.12%)</title><rect x="61.5354%" y="213" width="0.1187%" height="15" fill="rgb(247,143,39)"/><text x="61.7854%" y="223.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (3 samples, 0.12%)</title><rect x="61.5354%" y="197" width="0.1187%" height="15" fill="rgb(236,97,10)"/><text x="61.7854%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (3 samples, 0.12%)</title><rect x="61.5354%" y="181" width="0.1187%" height="15" fill="rgb(233,208,19)"/><text x="61.7854%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (3 samples, 0.12%)</title><rect x="61.5354%" y="165" width="0.1187%" height="15" fill="rgb(216,164,2)"/><text x="61.7854%" y="175.50"></text></g><g><title>gfx::encoder::Encoder&lt;R,C&gt;::flush (9 samples, 0.36%)</title><rect x="61.4563%" y="373" width="0.3562%" height="15" fill="rgb(220,129,5)"/><text x="61.7063%" y="383.50"></text></g><g><title>gfx::encoder::Encoder&lt;R,C&gt;::flush_no_reset (9 samples, 0.36%)</title><rect x="61.4563%" y="357" width="0.3562%" height="15" fill="rgb(242,17,10)"/><text x="61.7063%" y="367.50"></text></g><g><title>&lt;gfx_device_gl::Device as gfx_core::Device&gt;::submit (7 samples, 0.28%)</title><rect x="61.5354%" y="341" width="0.2770%" height="15" fill="rgb(242,107,0)"/><text x="61.7854%" y="351.50"></text></g><g><title>gfx_device_gl::Device::no_fence_submit (4 samples, 0.16%)</title><rect x="61.6541%" y="325" width="0.1583%" height="15" fill="rgb(251,28,31)"/><text x="61.9041%" y="335.50"></text></g><g><title>gfx_device_gl::Device::process (4 samples, 0.16%)</title><rect x="61.6541%" y="309" width="0.1583%" height="15" fill="rgb(233,223,10)"/><text x="61.9041%" y="319.50"></text></g><g><title>gfx_gl::Gl::DrawElements (4 samples, 0.16%)</title><rect x="61.6541%" y="293" width="0.1583%" height="15" fill="rgb(215,21,27)"/><text x="61.9041%" y="303.50"></text></g><g><title>&lt;main::Game as ggez::event::EventHandler&gt;::draw (157 samples, 6.21%)</title><rect x="55.6391%" y="405" width="6.2129%" height="15" fill="rgb(232,23,21)"/><text x="55.8891%" y="415.50">&lt;main::G..</text></g><g><title>ggez::graphics::present (15 samples, 0.59%)</title><rect x="61.2584%" y="389" width="0.5936%" height="15" fill="rgb(244,5,23)"/><text x="61.5084%" y="399.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (3 samples, 0.12%)</title><rect x="62.0103%" y="133" width="0.1187%" height="15" fill="rgb(226,81,46)"/><text x="62.2603%" y="143.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (3 samples, 0.12%)</title><rect x="62.0103%" y="117" width="0.1187%" height="15" fill="rgb(247,70,30)"/><text x="62.2603%" y="127.50"></text></g><g><title>nalgebra::geometry::point::Point&lt;N,D&gt;::get_unchecked_mut (6 samples, 0.24%)</title><rect x="61.9311%" y="213" width="0.2374%" height="15" fill="rgb(212,68,19)"/><text x="62.1811%" y="223.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;N,D,nalgebra::base::dimension::U1,S&gt;::vget_unchecked_mut (6 samples, 0.24%)</title><rect x="61.9311%" y="197" width="0.2374%" height="15" fill="rgb(240,187,13)"/><text x="62.1811%" y="207.50"></text></g><g><title>nalgebra::base::storage::StorageMut::get_unchecked_linear_mut (4 samples, 0.16%)</title><rect x="62.0103%" y="181" width="0.1583%" height="15" fill="rgb(223,113,26)"/><text x="62.2603%" y="191.50"></text></g><g><title>nalgebra::base::storage::StorageMut::get_address_unchecked_linear_mut (4 samples, 0.16%)</title><rect x="62.0103%" y="165" width="0.1583%" height="15" fill="rgb(206,192,2)"/><text x="62.2603%" y="175.50"></text></g><g><title>&lt;nalgebra::base::array_storage::ArrayStorage&lt;N,R,C&gt; as nalgebra::base::storage::StorageMut&lt;N,R,C&gt;&gt;::ptr_mut/&lt;generic_array::GenericArray&lt;T,N&gt; as core::ops::deref::DerefMut&gt;::deref_mut (4 samples, 0.16%)</title><rect x="62.0103%" y="149" width="0.1583%" height="15" fill="rgb(241,108,4)"/><text x="62.2603%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (9 samples, 0.36%)</title><rect x="61.8520%" y="373" width="0.3562%" height="15" fill="rgb(247,173,49)"/><text x="62.1020%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (9 samples, 0.36%)</title><rect x="61.8520%" y="357" width="0.3562%" height="15" fill="rgb(224,114,35)"/><text x="62.1020%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (9 samples, 0.36%)</title><rect x="61.8520%" y="341" width="0.3562%" height="15" fill="rgb(245,159,27)"/><text x="62.1020%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (9 samples, 0.36%)</title><rect x="61.8520%" y="325" width="0.3562%" height="15" fill="rgb(245,172,44)"/><text x="62.1020%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (9 samples, 0.36%)</title><rect x="61.8520%" y="309" width="0.3562%" height="15" fill="rgb(236,23,11)"/><text x="62.1020%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.36%)</title><rect x="61.8520%" y="293" width="0.3562%" height="15" fill="rgb(205,117,38)"/><text x="62.1020%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (9 samples, 0.36%)</title><rect x="61.8520%" y="277" width="0.3562%" height="15" fill="rgb(237,72,25)"/><text x="62.1020%" y="287.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (8 samples, 0.32%)</title><rect x="61.8916%" y="261" width="0.3166%" height="15" fill="rgb(244,70,9)"/><text x="62.1416%" y="271.50"></text></g><g><title>main::analyze::{{closure}} (8 samples, 0.32%)</title><rect x="61.8916%" y="245" width="0.3166%" height="15" fill="rgb(217,125,39)"/><text x="62.1416%" y="255.50"></text></g><g><title>nalgebra::geometry::point_construction::&lt;impl nalgebra::geometry::point::Point&lt;N,nalgebra::base::dimension::U2&gt;&gt;::new (7 samples, 0.28%)</title><rect x="61.9311%" y="229" width="0.2770%" height="15" fill="rgb(235,36,10)"/><text x="62.1811%" y="239.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next/core::slice::Iter&lt;T&gt;::post_inc_start (5 samples, 0.20%)</title><rect x="62.6039%" y="197" width="0.1979%" height="15" fill="rgb(251,123,47)"/><text x="62.8539%" y="207.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.12%)</title><rect x="62.8017%" y="197" width="0.1187%" height="15" fill="rgb(221,13,13)"/><text x="63.0517%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (7 samples, 0.28%)</title><rect x="63.3953%" y="149" width="0.2770%" height="15" fill="rgb(238,131,9)"/><text x="63.6453%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (10 samples, 0.40%)</title><rect x="63.3558%" y="165" width="0.3957%" height="15" fill="rgb(211,50,8)"/><text x="63.6058%" y="175.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (22 samples, 0.87%)</title><rect x="63.1579%" y="181" width="0.8706%" height="15" fill="rgb(245,182,24)"/><text x="63.4079%" y="191.50"></text></g><g><title>core::ops::function::FnMut::call_mut (7 samples, 0.28%)</title><rect x="63.7515%" y="165" width="0.2770%" height="15" fill="rgb(242,14,37)"/><text x="64.0015%" y="175.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.12%)</title><rect x="63.9098%" y="149" width="0.1187%" height="15" fill="rgb(246,228,12)"/><text x="64.1598%" y="159.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (35 samples, 1.39%)</title><rect x="62.9205%" y="197" width="1.3850%" height="15" fill="rgb(213,55,15)"/><text x="63.1705%" y="207.50"></text></g><g><title>core::ops::function::FnMut::call_mut (7 samples, 0.28%)</title><rect x="64.0285%" y="181" width="0.2770%" height="15" fill="rgb(209,9,3)"/><text x="64.2785%" y="191.50"></text></g><g><title>&lt;ggez::graphics::Vertex as core::clone::Clone&gt;::clone (4 samples, 0.16%)</title><rect x="64.1472%" y="165" width="0.1583%" height="15" fill="rgb(230,59,30)"/><text x="64.3972%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (52 samples, 2.06%)</title><rect x="62.3269%" y="341" width="2.0578%" height="15" fill="rgb(209,121,21)"/><text x="62.5769%" y="351.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (52 samples, 2.06%)</title><rect x="62.3269%" y="325" width="2.0578%" height="15" fill="rgb(220,109,13)"/><text x="62.5769%" y="335.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (52 samples, 2.06%)</title><rect x="62.3269%" y="309" width="2.0578%" height="15" fill="rgb(232,18,1)"/><text x="62.5769%" y="319.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (52 samples, 2.06%)</title><rect x="62.3269%" y="293" width="2.0578%" height="15" fill="rgb(215,41,42)"/><text x="62.5769%" y="303.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (52 samples, 2.06%)</title><rect x="62.3269%" y="277" width="2.0578%" height="15" fill="rgb(224,123,36)"/><text x="62.5769%" y="287.50">c..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (52 samples, 2.06%)</title><rect x="62.3269%" y="261" width="2.0578%" height="15" fill="rgb(240,125,3)"/><text x="62.5769%" y="271.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (52 samples, 2.06%)</title><rect x="62.3269%" y="245" width="2.0578%" height="15" fill="rgb(205,98,50)"/><text x="62.5769%" y="255.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (52 samples, 2.06%)</title><rect x="62.3269%" y="229" width="2.0578%" height="15" fill="rgb(205,185,37)"/><text x="62.5769%" y="239.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (52 samples, 2.06%)</title><rect x="62.3269%" y="213" width="2.0578%" height="15" fill="rgb(238,207,15)"/><text x="62.5769%" y="223.50">c..</text></g><g><title>gfx::factory::FactoryExt::create_vertex_buffer_with_slice (3 samples, 0.12%)</title><rect x="64.3846%" y="341" width="0.1187%" height="15" fill="rgb(213,199,42)"/><text x="64.6346%" y="351.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.20%)</title><rect x="66.2841%" y="325" width="0.1979%" height="15" fill="rgb(235,201,11)"/><text x="66.5341%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.12%)</title><rect x="66.9964%" y="309" width="0.1187%" height="15" fill="rgb(207,46,11)"/><text x="67.2464%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (4 samples, 0.16%)</title><rect x="67.1152%" y="309" width="0.1583%" height="15" fill="rgb(241,35,35)"/><text x="67.3652%" y="319.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next/core::slice::Iter&lt;T&gt;::post_inc_start (24 samples, 0.95%)</title><rect x="66.5216%" y="325" width="0.9497%" height="15" fill="rgb(243,32,47)"/><text x="66.7716%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (5 samples, 0.20%)</title><rect x="67.2734%" y="309" width="0.1979%" height="15" fill="rgb(247,202,23)"/><text x="67.5234%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (3 samples, 0.12%)</title><rect x="67.4713%" y="309" width="0.1187%" height="15" fill="rgb(219,102,11)"/><text x="67.7213%" y="319.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.24%)</title><rect x="67.4713%" y="325" width="0.2374%" height="15" fill="rgb(243,110,44)"/><text x="67.7213%" y="335.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::max (12 samples, 0.47%)</title><rect x="67.7087%" y="325" width="0.4749%" height="15" fill="rgb(222,74,54)"/><text x="67.9587%" y="335.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::min (4 samples, 0.16%)</title><rect x="68.1836%" y="325" width="0.1583%" height="15" fill="rgb(216,99,12)"/><text x="68.4336%" y="335.50"></text></g><g><title>ggez::graphics::mesh::MeshBuilder::build (157 samples, 6.21%)</title><rect x="62.2082%" y="373" width="6.2129%" height="15" fill="rgb(226,22,26)"/><text x="62.4582%" y="383.50">ggez::gr..</text></g><g><title>ggez::graphics::mesh::Mesh::from_raw (157 samples, 6.21%)</title><rect x="62.2082%" y="357" width="6.2129%" height="15" fill="rgb(217,163,10)"/><text x="62.4582%" y="367.50">ggez::gr..</text></g><g><title>ggez::graphics::mesh::bbox_for_vertices (99 samples, 3.92%)</title><rect x="64.5034%" y="341" width="3.9177%" height="15" fill="rgb(213,25,53)"/><text x="64.7534%" y="351.50">ggez..</text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.40%)</title><rect x="68.4211%" y="245" width="0.3957%" height="15" fill="rgb(252,105,26)"/><text x="68.6711%" y="255.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (9 samples, 0.36%)</title><rect x="68.4606%" y="229" width="0.3562%" height="15" fill="rgb(220,39,43)"/><text x="68.7106%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (9 samples, 0.36%)</title><rect x="68.4606%" y="213" width="0.3562%" height="15" fill="rgb(229,68,48)"/><text x="68.7106%" y="223.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned::{{closure}} (9 samples, 0.36%)</title><rect x="68.4606%" y="197" width="0.3562%" height="15" fill="rgb(252,8,32)"/><text x="68.7106%" y="207.50"></text></g><g><title>&lt;nalgebra::geometry::point::Point&lt;N,D&gt; as core::clone::Clone&gt;::clone (9 samples, 0.36%)</title><rect x="68.4606%" y="181" width="0.3562%" height="15" fill="rgb(223,20,43)"/><text x="68.7106%" y="191.50"></text></g><g><title>&lt;nalgebra::base::matrix::Matrix&lt;N,R,C,S&gt; as core::clone::Clone&gt;::clone (8 samples, 0.32%)</title><rect x="68.5002%" y="165" width="0.3166%" height="15" fill="rgb(229,81,49)"/><text x="68.7502%" y="175.50"></text></g><g><title>&lt;nalgebra::base::array_storage::ArrayStorage&lt;N,R,C&gt; as core::clone::Clone&gt;::clone (7 samples, 0.28%)</title><rect x="68.5398%" y="149" width="0.2770%" height="15" fill="rgb(236,28,36)"/><text x="68.7898%" y="159.50"></text></g><g><title>generic_array::impls::&lt;impl core::clone::Clone for generic_array::GenericArray&lt;T,N&gt;&gt;::clone (7 samples, 0.28%)</title><rect x="68.5398%" y="133" width="0.2770%" height="15" fill="rgb(249,185,26)"/><text x="68.7898%" y="143.50"></text></g><g><title>generic_array::functional::FunctionalSequence::map (7 samples, 0.28%)</title><rect x="68.5398%" y="117" width="0.2770%" height="15" fill="rgb(249,174,33)"/><text x="68.7898%" y="127.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (7 samples, 0.28%)</title><rect x="68.5398%" y="101" width="0.2770%" height="15" fill="rgb(233,201,37)"/><text x="68.7898%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.47%)</title><rect x="68.4211%" y="261" width="0.4749%" height="15" fill="rgb(221,78,26)"/><text x="68.6711%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.51%)</title><rect x="68.4211%" y="293" width="0.5144%" height="15" fill="rgb(250,127,30)"/><text x="68.6711%" y="303.50"></text></g><g><title>&lt;lyon_path::iterator::FromPolyline&lt;Iter&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.51%)</title><rect x="68.4211%" y="277" width="0.5144%" height="15" fill="rgb(230,49,44)"/><text x="68.6711%" y="287.50"></text></g><g><title>ggez::graphics::mesh::MeshBuilder::line (22 samples, 0.87%)</title><rect x="68.4211%" y="373" width="0.8706%" height="15" fill="rgb(229,67,23)"/><text x="68.6711%" y="383.50"></text></g><g><title>ggez::graphics::mesh::MeshBuilder::polyline (22 samples, 0.87%)</title><rect x="68.4211%" y="357" width="0.8706%" height="15" fill="rgb(249,83,47)"/><text x="68.6711%" y="367.50"></text></g><g><title>ggez::graphics::mesh::MeshBuilder::polyline_inner (22 samples, 0.87%)</title><rect x="68.4211%" y="341" width="0.8706%" height="15" fill="rgb(215,43,3)"/><text x="68.6711%" y="351.50"></text></g><g><title>lyon_tessellation::basic_shapes::stroke_polyline (22 samples, 0.87%)</title><rect x="68.4211%" y="325" width="0.8706%" height="15" fill="rgb(238,154,13)"/><text x="68.6711%" y="335.50"></text></g><g><title>lyon_tessellation::path_stroke::StrokeTessellator::tessellate_path (22 samples, 0.87%)</title><rect x="68.4211%" y="309" width="0.8706%" height="15" fill="rgb(219,56,2)"/><text x="68.6711%" y="319.50"></text></g><g><title>lyon_path::builder::PathBuilder::path_event (9 samples, 0.36%)</title><rect x="68.9355%" y="293" width="0.3562%" height="15" fill="rgb(233,0,4)"/><text x="69.1855%" y="303.50"></text></g><g><title>&lt;lyon_tessellation::path_stroke::StrokeBuilder as lyon_path::builder::FlatPathBuilder&gt;::line_to (9 samples, 0.36%)</title><rect x="68.9355%" y="277" width="0.3562%" height="15" fill="rgb(235,30,7)"/><text x="69.1855%" y="287.50"></text></g><g><title>lyon_tessellation::path_stroke::StrokeBuilder::edge_to (9 samples, 0.36%)</title><rect x="68.9355%" y="261" width="0.3562%" height="15" fill="rgb(250,79,13)"/><text x="69.1855%" y="271.50"></text></g><g><title>lyon_tessellation::path_stroke::StrokeBuilder::tessellate_join (5 samples, 0.20%)</title><rect x="69.0938%" y="245" width="0.1979%" height="15" fill="rgb(211,146,34)"/><text x="69.3438%" y="255.50"></text></g><g><title>lyon_tessellation::path_stroke::StrokeBuilder::tessellate_back_join (4 samples, 0.16%)</title><rect x="69.1334%" y="229" width="0.1583%" height="15" fill="rgb(228,22,38)"/><text x="69.3834%" y="239.50"></text></g><g><title>kopek::fft::fft::fft_inner (3 samples, 0.12%)</title><rect x="69.4499%" y="245" width="0.1187%" height="15" fill="rgb(235,168,5)"/><text x="69.6999%" y="255.50"></text></g><g><title>kopek::fft::fft::fft_inner (8 samples, 0.32%)</title><rect x="69.2917%" y="341" width="0.3166%" height="15" fill="rgb(221,155,16)"/><text x="69.5417%" y="351.50"></text></g><g><title>kopek::fft::fft::fft_inner (8 samples, 0.32%)</title><rect x="69.2917%" y="325" width="0.3166%" height="15" fill="rgb(215,215,53)"/><text x="69.5417%" y="335.50"></text></g><g><title>kopek::fft::fft::fft_inner (7 samples, 0.28%)</title><rect x="69.3312%" y="309" width="0.2770%" height="15" fill="rgb(223,4,10)"/><text x="69.5812%" y="319.50"></text></g><g><title>kopek::fft::fft::fft_inner (6 samples, 0.24%)</title><rect x="69.3708%" y="293" width="0.2374%" height="15" fill="rgb(234,103,6)"/><text x="69.6208%" y="303.50"></text></g><g><title>kopek::fft::fft::fft_inner (5 samples, 0.20%)</title><rect x="69.4104%" y="277" width="0.1979%" height="15" fill="rgb(227,97,0)"/><text x="69.6604%" y="287.50"></text></g><g><title>kopek::fft::fft::fft_inner (4 samples, 0.16%)</title><rect x="69.4499%" y="261" width="0.1583%" height="15" fill="rgb(234,150,53)"/><text x="69.6999%" y="271.50"></text></g><g><title>ggez::event::run (354 samples, 14.01%)</title><rect x="55.6391%" y="421" width="14.0087%" height="15" fill="rgb(228,201,54)"/><text x="55.8891%" y="431.50">ggez::event::run</text></g><g><title>&lt;main::Game as ggez::event::EventHandler&gt;::update (197 samples, 7.80%)</title><rect x="61.8520%" y="405" width="7.7958%" height="15" fill="rgb(222,22,37)"/><text x="62.1020%" y="415.50">&lt;main::Game..</text></g><g><title>main::analyze (197 samples, 7.80%)</title><rect x="61.8520%" y="389" width="7.7958%" height="15" fill="rgb(237,53,32)"/><text x="62.1020%" y="399.50">main::analy..</text></g><g><title>kopek::fft::fft (9 samples, 0.36%)</title><rect x="69.2917%" y="373" width="0.3562%" height="15" fill="rgb(233,25,53)"/><text x="69.5417%" y="383.50"></text></g><g><title>kopek::fft::fft::fft_inner (9 samples, 0.36%)</title><rect x="69.2917%" y="357" width="0.3562%" height="15" fill="rgb(210,40,34)"/><text x="69.5417%" y="367.50"></text></g><g><title>&lt;i16 as hound::Sample&gt;::read (6 samples, 0.24%)</title><rect x="70.2414%" y="181" width="0.2374%" height="15" fill="rgb(241,220,44)"/><text x="70.4914%" y="191.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (6 samples, 0.24%)</title><rect x="70.5975%" y="149" width="0.2374%" height="15" fill="rgb(235,28,35)"/><text x="70.8475%" y="159.50"></text></g><g><title>core::cmp::min (4 samples, 0.16%)</title><rect x="70.6767%" y="133" width="0.1583%" height="15" fill="rgb(210,56,17)"/><text x="70.9267%" y="143.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.16%)</title><rect x="70.6767%" y="117" width="0.1583%" height="15" fill="rgb(224,130,29)"/><text x="70.9267%" y="127.50"></text></g><g><title>core::cmp::min_by (4 samples, 0.16%)</title><rect x="70.6767%" y="101" width="0.1583%" height="15" fill="rgb(235,212,8)"/><text x="70.9267%" y="111.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6 samples, 0.24%)</title><rect x="71.0724%" y="101" width="0.2374%" height="15" fill="rgb(223,33,50)"/><text x="71.3224%" y="111.50"></text></g><g><title>core::slice::from_raw_parts (5 samples, 0.20%)</title><rect x="71.1120%" y="85" width="0.1979%" height="15" fill="rgb(219,149,13)"/><text x="71.3620%" y="95.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (13 samples, 0.51%)</title><rect x="70.8350%" y="149" width="0.5144%" height="15" fill="rgb(250,156,29)"/><text x="71.0850%" y="159.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (12 samples, 0.47%)</title><rect x="70.8746%" y="133" width="0.4749%" height="15" fill="rgb(216,193,19)"/><text x="71.1246%" y="143.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.36%)</title><rect x="70.9933%" y="117" width="0.3562%" height="15" fill="rgb(216,135,14)"/><text x="71.2433%" y="127.50"></text></g><g><title>core::cmp::min (4 samples, 0.16%)</title><rect x="71.5077%" y="133" width="0.1583%" height="15" fill="rgb(241,47,5)"/><text x="71.7577%" y="143.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.16%)</title><rect x="71.5077%" y="117" width="0.1583%" height="15" fill="rgb(233,42,35)"/><text x="71.7577%" y="127.50"></text></g><g><title>core::cmp::min_by (3 samples, 0.12%)</title><rect x="71.5473%" y="101" width="0.1187%" height="15" fill="rgb(231,13,6)"/><text x="71.7973%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (6 samples, 0.24%)</title><rect x="71.6660%" y="133" width="0.2374%" height="15" fill="rgb(207,181,40)"/><text x="71.9160%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::len (3 samples, 0.12%)</title><rect x="71.9034%" y="133" width="0.1187%" height="15" fill="rgb(254,173,49)"/><text x="72.1534%" y="143.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6 samples, 0.24%)</title><rect x="72.2200%" y="69" width="0.2374%" height="15" fill="rgb(221,1,38)"/><text x="72.4700%" y="79.50"></text></g><g><title>core::slice::from_raw_parts (3 samples, 0.12%)</title><rect x="72.3387%" y="53" width="0.1187%" height="15" fill="rgb(206,124,46)"/><text x="72.5887%" y="63.50"></text></g><g><title>core::ptr::slice_from_raw_parts (3 samples, 0.12%)</title><rect x="72.3387%" y="37" width="0.1187%" height="15" fill="rgb(249,21,11)"/><text x="72.5887%" y="47.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (10 samples, 0.40%)</title><rect x="72.1409%" y="85" width="0.3957%" height="15" fill="rgb(222,201,40)"/><text x="72.3909%" y="95.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.51%)</title><rect x="72.0617%" y="101" width="0.5144%" height="15" fill="rgb(235,61,29)"/><text x="72.3117%" y="111.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5 samples, 0.20%)</title><rect x="72.6949%" y="69" width="0.1979%" height="15" fill="rgb(219,207,3)"/><text x="72.9449%" y="79.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.12%)</title><rect x="72.7740%" y="53" width="0.1187%" height="15" fill="rgb(222,56,46)"/><text x="73.0240%" y="63.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (25 samples, 0.99%)</title><rect x="72.0222%" y="133" width="0.9893%" height="15" fill="rgb(239,76,54)"/><text x="72.2722%" y="143.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (25 samples, 0.99%)</title><rect x="72.0222%" y="117" width="0.9893%" height="15" fill="rgb(231,124,27)"/><text x="72.2722%" y="127.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.44%)</title><rect x="72.5762%" y="101" width="0.4353%" height="15" fill="rgb(249,195,6)"/><text x="72.8262%" y="111.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (10 samples, 0.40%)</title><rect x="72.6157%" y="85" width="0.3957%" height="15" fill="rgb(237,174,47)"/><text x="72.8657%" y="95.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (72 samples, 2.85%)</title><rect x="70.5580%" y="165" width="2.8492%" height="15" fill="rgb(206,201,31)"/><text x="70.8080%" y="175.50">&lt;s..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (49 samples, 1.94%)</title><rect x="71.4681%" y="149" width="1.9391%" height="15" fill="rgb(231,57,52)"/><text x="71.7181%" y="159.50">s..</text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (10 samples, 0.40%)</title><rect x="73.0115%" y="133" width="0.3957%" height="15" fill="rgb(248,177,22)"/><text x="73.2615%" y="143.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (10 samples, 0.40%)</title><rect x="73.0115%" y="117" width="0.3957%" height="15" fill="rgb(215,211,37)"/><text x="73.2615%" y="127.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (9 samples, 0.36%)</title><rect x="73.0510%" y="101" width="0.3562%" height="15" fill="rgb(241,128,51)"/><text x="73.3010%" y="111.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (8 samples, 0.32%)</title><rect x="73.0906%" y="85" width="0.3166%" height="15" fill="rgb(227,165,31)"/><text x="73.3406%" y="95.50"></text></g><g><title>&lt;i16 as hound::Sample&gt;::read/&lt;R as hound::read::ReadExt&gt;::read_le_i16/&lt;R as hound::read::ReadExt&gt;::read_le_u16/&lt;R as hound::read::ReadExt&gt;::read_into (79 samples, 3.13%)</title><rect x="70.4788%" y="181" width="3.1262%" height="15" fill="rgb(228,167,24)"/><text x="70.7288%" y="191.50">&lt;i1..</text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 0.20%)</title><rect x="73.4072%" y="165" width="0.1979%" height="15" fill="rgb(228,143,12)"/><text x="73.6572%" y="175.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.20%)</title><rect x="73.4072%" y="149" width="0.1979%" height="15" fill="rgb(249,149,8)"/><text x="73.6572%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.20%)</title><rect x="73.4072%" y="133" width="0.1979%" height="15" fill="rgb(243,35,44)"/><text x="73.6572%" y="143.50"></text></g><g><title>&lt;i16 as hound::Sample&gt;::read/&lt;R as hound::read::ReadExt&gt;::read_le_i16 (3 samples, 0.12%)</title><rect x="73.6051%" y="181" width="0.1187%" height="15" fill="rgb(246,89,9)"/><text x="73.8551%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (3 samples, 0.12%)</title><rect x="73.6051%" y="165" width="0.1187%" height="15" fill="rgb(233,213,13)"/><text x="73.8551%" y="175.50"></text></g><g><title>&lt;hound::read::WavSamples&lt;R,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (97 samples, 3.84%)</title><rect x="70.0040%" y="213" width="3.8385%" height="15" fill="rgb(233,141,41)"/><text x="70.2540%" y="223.50">&lt;hou..</text></g><g><title>hound::read::iter_next (96 samples, 3.80%)</title><rect x="70.0435%" y="197" width="3.7990%" height="15" fill="rgb(239,167,4)"/><text x="70.2935%" y="207.50">houn..</text></g><g><title>&lt;audrey::read::Frames&lt;R,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (108 samples, 4.27%)</title><rect x="69.7269%" y="293" width="4.2738%" height="15" fill="rgb(209,217,16)"/><text x="69.9769%" y="303.50">&lt;audr..</text></g><g><title>&lt;[S (106 samples, 4.19%)</title><rect x="69.8061%" y="277" width="4.1947%" height="15" fill="rgb(219,88,35)"/><text x="70.0561%" y="287.50">&lt;[S</text></g><g><title> 2] as sample::frame::Frame&gt;::from_fn (106 samples, 4.19%)</title><rect x="69.8061%" y="261" width="4.1947%" height="15" fill="rgb(220,193,23)"/><text x="70.0561%" y="271.50"> 2] a..</text></g><g><title>&lt;audrey::read::Frames&lt;R,F&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (106 samples, 4.19%)</title><rect x="69.8061%" y="245" width="4.1947%" height="15" fill="rgb(230,90,52)"/><text x="70.0561%" y="255.50">&lt;audr..</text></g><g><title>&lt;audrey::read::Samples&lt;R,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (104 samples, 4.12%)</title><rect x="69.8852%" y="229" width="4.1156%" height="15" fill="rgb(252,106,19)"/><text x="70.1352%" y="239.50">&lt;aud..</text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.16%)</title><rect x="73.8425%" y="213" width="0.1583%" height="15" fill="rgb(206,74,20)"/><text x="74.0925%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (111 samples, 4.39%)</title><rect x="69.6874%" y="309" width="4.3926%" height="15" fill="rgb(230,138,44)"/><text x="69.9374%" y="319.50">&lt;core..</text></g><g><title>kopek::decoder::decode (327 samples, 12.94%)</title><rect x="69.6478%" y="405" width="12.9402%" height="15" fill="rgb(235,182,43)"/><text x="69.8978%" y="415.50">kopek::decoder::dec..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (327 samples, 12.94%)</title><rect x="69.6478%" y="389" width="12.9402%" height="15" fill="rgb(242,16,51)"/><text x="69.8978%" y="399.50">core::iter::traits:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (327 samples, 12.94%)</title><rect x="69.6478%" y="373" width="12.9402%" height="15" fill="rgb(248,9,4)"/><text x="69.8978%" y="383.50">&lt;alloc::vec::Vec&lt;T&gt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (327 samples, 12.94%)</title><rect x="69.6478%" y="357" width="12.9402%" height="15" fill="rgb(210,31,22)"/><text x="69.8978%" y="367.50">&lt;alloc::vec::Vec&lt;T&gt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (327 samples, 12.94%)</title><rect x="69.6478%" y="341" width="12.9402%" height="15" fill="rgb(239,54,39)"/><text x="69.8978%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt;..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (327 samples, 12.94%)</title><rect x="69.6478%" y="325" width="12.9402%" height="15" fill="rgb(230,99,41)"/><text x="69.8978%" y="335.50">alloc::vec::Vec&lt;T&gt;:..</text></g><g><title>core::ptr::write (211 samples, 8.35%)</title><rect x="74.2382%" y="309" width="8.3498%" height="15" fill="rgb(253,106,12)"/><text x="74.4882%" y="319.50">core::ptr::w..</text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (3 samples, 0.12%)</title><rect x="83.5774%" y="133" width="0.1187%" height="15" fill="rgb(213,46,41)"/><text x="83.8274%" y="143.50"></text></g><g><title>core::cmp::min (3 samples, 0.12%)</title><rect x="83.5774%" y="117" width="0.1187%" height="15" fill="rgb(215,133,35)"/><text x="83.8274%" y="127.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.12%)</title><rect x="83.9335%" y="85" width="0.1187%" height="15" fill="rgb(213,28,5)"/><text x="84.1835%" y="95.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (10 samples, 0.40%)</title><rect x="83.6961%" y="133" width="0.3957%" height="15" fill="rgb(215,77,49)"/><text x="83.9461%" y="143.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.28%)</title><rect x="83.8148%" y="117" width="0.2770%" height="15" fill="rgb(248,100,22)"/><text x="84.0648%" y="127.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.24%)</title><rect x="83.8544%" y="101" width="0.2374%" height="15" fill="rgb(208,67,9)"/><text x="84.1044%" y="111.50"></text></g><g><title>core::cmp::min (4 samples, 0.16%)</title><rect x="84.2897%" y="117" width="0.1583%" height="15" fill="rgb(219,133,21)"/><text x="84.5397%" y="127.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.16%)</title><rect x="84.2897%" y="101" width="0.1583%" height="15" fill="rgb(246,46,29)"/><text x="84.5397%" y="111.50"></text></g><g><title>core::cmp::min_by (4 samples, 0.16%)</title><rect x="84.2897%" y="85" width="0.1583%" height="15" fill="rgb(246,185,52)"/><text x="84.5397%" y="95.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::len (3 samples, 0.12%)</title><rect x="84.5271%" y="117" width="0.1187%" height="15" fill="rgb(252,136,11)"/><text x="84.7771%" y="127.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.12%)</title><rect x="84.8833%" y="69" width="0.1187%" height="15" fill="rgb(219,138,53)"/><text x="85.1333%" y="79.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.12%)</title><rect x="84.8833%" y="53" width="0.1187%" height="15" fill="rgb(211,51,23)"/><text x="85.1333%" y="63.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.28%)</title><rect x="84.8041%" y="85" width="0.2770%" height="15" fill="rgb(247,221,28)"/><text x="85.0541%" y="95.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.12%)</title><rect x="85.2790%" y="53" width="0.1187%" height="15" fill="rgb(251,222,45)"/><text x="85.5290%" y="63.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (22 samples, 0.87%)</title><rect x="84.6458%" y="117" width="0.8706%" height="15" fill="rgb(217,162,53)"/><text x="84.8958%" y="127.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (20 samples, 0.79%)</title><rect x="84.7250%" y="101" width="0.7915%" height="15" fill="rgb(229,93,14)"/><text x="84.9750%" y="111.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.44%)</title><rect x="85.0811%" y="85" width="0.4353%" height="15" fill="rgb(209,67,49)"/><text x="85.3311%" y="95.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.32%)</title><rect x="85.1998%" y="69" width="0.3166%" height="15" fill="rgb(213,87,29)"/><text x="85.4498%" y="79.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (7 samples, 0.28%)</title><rect x="85.5164%" y="85" width="0.2770%" height="15" fill="rgb(205,151,52)"/><text x="85.7664%" y="95.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (4 samples, 0.16%)</title><rect x="85.6351%" y="69" width="0.1583%" height="15" fill="rgb(253,215,39)"/><text x="85.8851%" y="79.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (58 samples, 2.30%)</title><rect x="83.5378%" y="149" width="2.2952%" height="15" fill="rgb(221,220,41)"/><text x="83.7878%" y="159.50">&lt;..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (44 samples, 1.74%)</title><rect x="84.0918%" y="133" width="1.7412%" height="15" fill="rgb(218,133,21)"/><text x="84.3418%" y="143.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (8 samples, 0.32%)</title><rect x="85.5164%" y="117" width="0.3166%" height="15" fill="rgb(221,193,43)"/><text x="85.7664%" y="127.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (8 samples, 0.32%)</title><rect x="85.5164%" y="101" width="0.3166%" height="15" fill="rgb(240,128,52)"/><text x="85.7664%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6 samples, 0.24%)</title><rect x="86.0309%" y="85" width="0.2374%" height="15" fill="rgb(253,114,12)"/><text x="86.2809%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.16%)</title><rect x="86.1100%" y="69" width="0.1583%" height="15" fill="rgb(215,223,47)"/><text x="86.3600%" y="79.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (9 samples, 0.36%)</title><rect x="85.9913%" y="101" width="0.3562%" height="15" fill="rgb(248,225,23)"/><text x="86.2413%" y="111.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (12 samples, 0.47%)</title><rect x="85.9121%" y="117" width="0.4749%" height="15" fill="rgb(250,108,0)"/><text x="86.1621%" y="127.50"></text></g><g><title>&lt;i16 as hound::Sample&gt;::read/&lt;R as hound::read::ReadExt&gt;::read_le_i16/&lt;R as hound::read::ReadExt&gt;::read_le_u16/&lt;R as hound::read::ReadExt&gt;::read_into (75 samples, 2.97%)</title><rect x="83.4586%" y="165" width="2.9679%" height="15" fill="rgb(228,208,7)"/><text x="83.7086%" y="175.50">&lt;i1..</text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (15 samples, 0.59%)</title><rect x="85.8330%" y="149" width="0.5936%" height="15" fill="rgb(244,45,10)"/><text x="86.0830%" y="159.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (15 samples, 0.59%)</title><rect x="85.8330%" y="133" width="0.5936%" height="15" fill="rgb(207,125,25)"/><text x="86.0830%" y="143.50"></text></g><g><title>&lt;i16 as hound::Sample&gt;::read/&lt;R as hound::read::ReadExt&gt;::read_le_i16 (3 samples, 0.12%)</title><rect x="86.4266%" y="165" width="0.1187%" height="15" fill="rgb(210,195,18)"/><text x="86.6766%" y="175.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (3 samples, 0.12%)</title><rect x="86.4266%" y="149" width="0.1187%" height="15" fill="rgb(249,80,12)"/><text x="86.6766%" y="159.50"></text></g><g><title>&lt;hound::read::WavSamples&lt;R,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 3.68%)</title><rect x="83.0233%" y="197" width="3.6803%" height="15" fill="rgb(221,65,9)"/><text x="83.2733%" y="207.50">&lt;hou..</text></g><g><title>hound::read::iter_next (92 samples, 3.64%)</title><rect x="83.0629%" y="181" width="3.6407%" height="15" fill="rgb(235,49,36)"/><text x="83.3129%" y="191.50">houn..</text></g><g><title>core::result::Result&lt;T,E&gt;::map (4 samples, 0.16%)</title><rect x="86.7432%" y="165" width="0.1583%" height="15" fill="rgb(225,32,20)"/><text x="86.9932%" y="175.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.12%)</title><rect x="86.7827%" y="149" width="0.1187%" height="15" fill="rgb(215,141,46)"/><text x="87.0327%" y="159.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7 samples, 0.28%)</title><rect x="86.7036%" y="197" width="0.2770%" height="15" fill="rgb(250,160,47)"/><text x="86.9536%" y="207.50"></text></g><g><title>&lt;audrey::read::Samples&lt;R,S&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (6 samples, 0.24%)</title><rect x="86.7432%" y="181" width="0.2374%" height="15" fill="rgb(216,222,40)"/><text x="86.9932%" y="191.50"></text></g><g><title>&lt;audrey::read::Frames&lt;R,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (104 samples, 4.12%)</title><rect x="82.9046%" y="277" width="4.1156%" height="15" fill="rgb(234,217,39)"/><text x="83.1546%" y="287.50">&lt;aud..</text></g><g><title>&lt;[S (104 samples, 4.12%)</title><rect x="82.9046%" y="261" width="4.1156%" height="15" fill="rgb(207,178,40)"/><text x="83.1546%" y="271.50">&lt;[S</text></g><g><title> 2] as sample::frame::Frame&gt;::from_fn (104 samples, 4.12%)</title><rect x="82.9046%" y="245" width="4.1156%" height="15" fill="rgb(221,136,13)"/><text x="83.1546%" y="255.50"> 2] ..</text></g><g><title>&lt;audrey::read::Frames&lt;R,F&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (104 samples, 4.12%)</title><rect x="82.9046%" y="229" width="4.1156%" height="15" fill="rgb(249,199,10)"/><text x="83.1546%" y="239.50">&lt;aud..</text></g><g><title>&lt;audrey::read::Samples&lt;R,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 4.04%)</title><rect x="82.9838%" y="213" width="4.0364%" height="15" fill="rgb(249,222,13)"/><text x="83.2338%" y="223.50">&lt;aud..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (108 samples, 4.27%)</title><rect x="82.8255%" y="293" width="4.2738%" height="15" fill="rgb(244,185,38)"/><text x="83.0755%" y="303.50">&lt;core..</text></g><g><title>_main (1,065 samples, 42.14%)</title><rect x="55.5995%" y="501" width="42.1448%" height="15" fill="rgb(236,202,9)"/><text x="55.8495%" y="511.50">_main</text></g><g><title>std::rt::lang_start (1,065 samples, 42.14%)</title><rect x="55.5995%" y="485" width="42.1448%" height="15" fill="rgb(250,229,37)"/><text x="55.8495%" y="495.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal/std::panic::catch_unwind/std::panicking::try/std::panicking::try::do_call/std::rt::lang_start_internal::{{closure}} (1,065 samples, 42.14%)</title><rect x="55.5995%" y="469" width="42.1448%" height="15" fill="rgb(206,174,23)"/><text x="55.8495%" y="479.50">std::rt::lang_start_internal/std::panic::catch_unwind/std::panicking:..</text></g><g><title>std::rt::lang_start::{{closure}} (1,065 samples, 42.14%)</title><rect x="55.5995%" y="453" width="42.1448%" height="15" fill="rgb(211,33,43)"/><text x="55.8495%" y="463.50">std::rt::lang_start::{{closure}}</text></g><g><title>main::main (1,065 samples, 42.14%)</title><rect x="55.5995%" y="437" width="42.1448%" height="15" fill="rgb(245,58,50)"/><text x="55.8495%" y="447.50">main::main</text></g><g><title>main::Game::new (710 samples, 28.10%)</title><rect x="69.6478%" y="421" width="28.0966%" height="15" fill="rgb(244,68,36)"/><text x="69.8978%" y="431.50">main::Game::new</text></g><g><title>main::play_ogg (381 samples, 15.08%)</title><rect x="82.6672%" y="405" width="15.0772%" height="15" fill="rgb(232,229,15)"/><text x="82.9172%" y="415.50">main::play_ogg</text></g><g><title>kopek::decoder::decode (381 samples, 15.08%)</title><rect x="82.6672%" y="389" width="15.0772%" height="15" fill="rgb(254,30,23)"/><text x="82.9172%" y="399.50">kopek::decoder::decode</text></g><g><title>core::iter::traits::iterator::Iterator::collect (381 samples, 15.08%)</title><rect x="82.6672%" y="373" width="15.0772%" height="15" fill="rgb(235,160,14)"/><text x="82.9172%" y="383.50">core::iter::traits::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (381 samples, 15.08%)</title><rect x="82.6672%" y="357" width="15.0772%" height="15" fill="rgb(212,155,44)"/><text x="82.9172%" y="367.50">&lt;alloc::vec::Vec&lt;T&gt; as ..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (381 samples, 15.08%)</title><rect x="82.6672%" y="341" width="15.0772%" height="15" fill="rgb(226,2,50)"/><text x="82.9172%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as ..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (381 samples, 15.08%)</title><rect x="82.6672%" y="325" width="15.0772%" height="15" fill="rgb(234,177,6)"/><text x="82.9172%" y="335.50">&lt;alloc::vec::Vec&lt;T&gt; as ..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (380 samples, 15.04%)</title><rect x="82.7068%" y="309" width="15.0376%" height="15" fill="rgb(217,24,9)"/><text x="82.9568%" y="319.50">alloc::vec::Vec&lt;T&gt;::ext..</text></g><g><title>core::ptr::write (265 samples, 10.49%)</title><rect x="87.2576%" y="293" width="10.4867%" height="15" fill="rgb(220,13,46)"/><text x="87.5076%" y="303.50">core::ptr::write</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.12%)</title><rect x="97.8235%" y="101" width="0.1187%" height="15" fill="rgb(239,221,27)"/><text x="98.0735%" y="111.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.12%)</title><rect x="97.8235%" y="85" width="0.1187%" height="15" fill="rgb(222,198,25)"/><text x="98.0735%" y="95.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.12%)</title><rect x="97.8235%" y="69" width="0.1187%" height="15" fill="rgb(211,99,13)"/><text x="98.0735%" y="79.50"></text></g><g><title>std::rt::lang_start (5 samples, 0.20%)</title><rect x="97.7839%" y="501" width="0.1979%" height="15" fill="rgb(232,111,31)"/><text x="98.0339%" y="511.50"></text></g><g><title>std::rt::lang_start_internal/std::panic::catch_unwind/std::panicking::try/std::panicking::try::do_call/std::rt::lang_start_internal::{{closure}} (5 samples, 0.20%)</title><rect x="97.7839%" y="485" width="0.1979%" height="15" fill="rgb(245,82,37)"/><text x="98.0339%" y="495.50"></text></g><g><title>std::rt::lang_start::{{closure}} (5 samples, 0.20%)</title><rect x="97.7839%" y="469" width="0.1979%" height="15" fill="rgb(227,149,46)"/><text x="98.0339%" y="479.50"></text></g><g><title>main::main (5 samples, 0.20%)</title><rect x="97.7839%" y="453" width="0.1979%" height="15" fill="rgb(218,36,50)"/><text x="98.0339%" y="463.50"></text></g><g><title>main::Game::new (4 samples, 0.16%)</title><rect x="97.8235%" y="437" width="0.1583%" height="15" fill="rgb(226,80,48)"/><text x="98.0735%" y="447.50"></text></g><g><title>main::play_ogg (4 samples, 0.16%)</title><rect x="97.8235%" y="421" width="0.1583%" height="15" fill="rgb(238,224,15)"/><text x="98.0735%" y="431.50"></text></g><g><title>kopek::decoder::decode (4 samples, 0.16%)</title><rect x="97.8235%" y="405" width="0.1583%" height="15" fill="rgb(241,136,10)"/><text x="98.0735%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.16%)</title><rect x="97.8235%" y="389" width="0.1583%" height="15" fill="rgb(208,32,45)"/><text x="98.0735%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.16%)</title><rect x="97.8235%" y="373" width="0.1583%" height="15" fill="rgb(207,135,9)"/><text x="98.0735%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (4 samples, 0.16%)</title><rect x="97.8235%" y="357" width="0.1583%" height="15" fill="rgb(206,86,44)"/><text x="98.0735%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.16%)</title><rect x="97.8235%" y="341" width="0.1583%" height="15" fill="rgb(245,177,15)"/><text x="98.0735%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (4 samples, 0.16%)</title><rect x="97.8235%" y="325" width="0.1583%" height="15" fill="rgb(206,64,50)"/><text x="98.0735%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.16%)</title><rect x="97.8235%" y="309" width="0.1583%" height="15" fill="rgb(234,36,40)"/><text x="98.0735%" y="319.50"></text></g><g><title>&lt;audrey::read::Frames&lt;R,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.16%)</title><rect x="97.8235%" y="293" width="0.1583%" height="15" fill="rgb(213,64,8)"/><text x="98.0735%" y="303.50"></text></g><g><title>&lt;[S (4 samples, 0.16%)</title><rect x="97.8235%" y="277" width="0.1583%" height="15" fill="rgb(210,75,36)"/><text x="98.0735%" y="287.50"></text></g><g><title> 2] as sample::frame::Frame&gt;::from_fn (4 samples, 0.16%)</title><rect x="97.8235%" y="261" width="0.1583%" height="15" fill="rgb(229,88,21)"/><text x="98.0735%" y="271.50"></text></g><g><title>&lt;audrey::read::Frames&lt;R,F&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (4 samples, 0.16%)</title><rect x="97.8235%" y="245" width="0.1583%" height="15" fill="rgb(252,204,47)"/><text x="98.0735%" y="255.50"></text></g><g><title>&lt;audrey::read::Samples&lt;R,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.16%)</title><rect x="97.8235%" y="229" width="0.1583%" height="15" fill="rgb(208,77,27)"/><text x="98.0735%" y="239.50"></text></g><g><title>&lt;hound::read::WavSamples&lt;R,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.16%)</title><rect x="97.8235%" y="213" width="0.1583%" height="15" fill="rgb(221,76,26)"/><text x="98.0735%" y="223.50"></text></g><g><title>hound::read::iter_next (4 samples, 0.16%)</title><rect x="97.8235%" y="197" width="0.1583%" height="15" fill="rgb(225,139,18)"/><text x="98.0735%" y="207.50"></text></g><g><title>&lt;i16 as hound::Sample&gt;::read/&lt;R as hound::read::ReadExt&gt;::read_le_i16/&lt;R as hound::read::ReadExt&gt;::read_le_u16/&lt;R as hound::read::ReadExt&gt;::read_into (4 samples, 0.16%)</title><rect x="97.8235%" y="181" width="0.1583%" height="15" fill="rgb(230,137,11)"/><text x="98.0735%" y="191.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.16%)</title><rect x="97.8235%" y="165" width="0.1583%" height="15" fill="rgb(212,28,1)"/><text x="98.0735%" y="175.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (4 samples, 0.16%)</title><rect x="97.8235%" y="149" width="0.1583%" height="15" fill="rgb(248,164,17)"/><text x="98.0735%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (4 samples, 0.16%)</title><rect x="97.8235%" y="133" width="0.1583%" height="15" fill="rgb(222,171,42)"/><text x="98.0735%" y="143.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.16%)</title><rect x="97.8235%" y="117" width="0.1583%" height="15" fill="rgb(243,84,45)"/><text x="98.0735%" y="127.50"></text></g><g><title>4804943296 (1,077 samples, 42.62%)</title><rect x="55.4808%" y="517" width="42.6197%" height="15" fill="rgb(252,49,23)"/><text x="55.7308%" y="527.50">4804943296</text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.24%)</title><rect x="98.4962%" y="309" width="0.2374%" height="15" fill="rgb(215,19,7)"/><text x="98.7462%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.20%)</title><rect x="98.5358%" y="293" width="0.1979%" height="15" fill="rgb(238,81,41)"/><text x="98.7858%" y="303.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.16%)</title><rect x="98.5754%" y="277" width="0.1583%" height="15" fill="rgb(210,199,37)"/><text x="98.8254%" y="287.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try::Try&gt;::into_result (3 samples, 0.12%)</title><rect x="98.7337%" y="309" width="0.1187%" height="15" fill="rgb(244,192,49)"/><text x="98.9837%" y="319.50"></text></g><g><title>core::mem::swap (3 samples, 0.12%)</title><rect x="98.8920%" y="277" width="0.1187%" height="15" fill="rgb(226,211,11)"/><text x="99.1420%" y="287.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (3 samples, 0.12%)</title><rect x="98.8920%" y="261" width="0.1187%" height="15" fill="rgb(236,162,54)"/><text x="99.1420%" y="271.50"></text></g><g><title>core::mem::replace (4 samples, 0.16%)</title><rect x="98.8920%" y="293" width="0.1583%" height="15" fill="rgb(220,229,9)"/><text x="99.1420%" y="303.50"></text></g><g><title>&lt;core::slice::ChunksMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.36%)</title><rect x="98.8524%" y="309" width="0.3562%" height="15" fill="rgb(250,87,22)"/><text x="99.1024%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (4 samples, 0.16%)</title><rect x="99.0503%" y="293" width="0.1583%" height="15" fill="rgb(239,43,17)"/><text x="99.3003%" y="303.50"></text></g><g><title>core::slice::from_raw_parts_mut (3 samples, 0.12%)</title><rect x="99.0898%" y="277" width="0.1187%" height="15" fill="rgb(231,177,25)"/><text x="99.3398%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.99%)</title><rect x="98.3380%" y="341" width="0.9893%" height="15" fill="rgb(219,179,1)"/><text x="98.5880%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (24 samples, 0.95%)</title><rect x="98.3775%" y="325" width="0.9497%" height="15" fill="rgb(238,219,53)"/><text x="98.6275%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (6 samples, 0.24%)</title><rect x="99.4064%" y="341" width="0.2374%" height="15" fill="rgb(232,167,36)"/><text x="99.6564%" y="351.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (4 samples, 0.16%)</title><rect x="99.4856%" y="325" width="0.1583%" height="15" fill="rgb(244,19,51)"/><text x="99.7356%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (4 samples, 0.16%)</title><rect x="99.6834%" y="341" width="0.1583%" height="15" fill="rgb(224,6,22)"/><text x="99.9334%" y="351.50"></text></g><g><title>all (2,527 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(224,145,5)"/><text x="0.2500%" y="543.50"></text></g><g><title>com.apple.audio (48 samples, 1.90%)</title><rect x="98.1005%" y="517" width="1.8995%" height="15" fill="rgb(234,130,49)"/><text x="98.3505%" y="527.50">c..</text></g><g><title>__pthread_start (48 samples, 1.90%)</title><rect x="98.1005%" y="501" width="1.8995%" height="15" fill="rgb(254,6,2)"/><text x="98.3505%" y="511.50">_..</text></g><g><title>HALB_IOThread::Entry (48 samples, 1.90%)</title><rect x="98.1005%" y="485" width="1.8995%" height="15" fill="rgb(208,96,46)"/><text x="98.3505%" y="495.50">H..</text></g><g><title>invocation function for block in HALC_ProxyIOContext::HALC_ProxyIOContext (48 samples, 1.90%)</title><rect x="98.1005%" y="469" width="1.8995%" height="15" fill="rgb(239,3,39)"/><text x="98.3505%" y="479.50">i..</text></g><g><title>coreaudio::audio_unit::render_callback::input_proc (46 samples, 1.82%)</title><rect x="98.1797%" y="453" width="1.8203%" height="15" fill="rgb(233,210,1)"/><text x="98.4297%" y="463.50">c..</text></g><g><title>coreaudio::audio_unit::render_callback::&lt;impl coreaudio::audio_unit::AudioUnit&gt;::set_render_callback::{{closure}} (46 samples, 1.82%)</title><rect x="98.1797%" y="437" width="1.8203%" height="15" fill="rgb(244,137,37)"/><text x="98.4297%" y="447.50">c..</text></g><g><title>cpal::host::coreaudio::EventLoop::build_output_stream::{{closure}} (46 samples, 1.82%)</title><rect x="98.1797%" y="421" width="1.8203%" height="15" fill="rgb(240,136,2)"/><text x="98.4297%" y="431.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (46 samples, 1.82%)</title><rect x="98.1797%" y="405" width="1.8203%" height="15" fill="rgb(239,18,37)"/><text x="98.4297%" y="415.50">c..</text></g><g><title>&lt;cpal::platform::platform_impl::EventLoop as cpal::traits::EventLoopTrait&gt;::run::{{closure}} (46 samples, 1.82%)</title><rect x="98.1797%" y="389" width="1.8203%" height="15" fill="rgb(218,185,22)"/><text x="98.4297%" y="399.50">&lt;..</text></g><g><title>main::play_ogg::{{closure}}::{{closure}} (46 samples, 1.82%)</title><rect x="98.1797%" y="373" width="1.8203%" height="15" fill="rgb(225,218,4)"/><text x="98.4297%" y="383.50">m..</text></g><g><title>main::play_ogg::write_to_buffer (46 samples, 1.82%)</title><rect x="98.1797%" y="357" width="1.8203%" height="15" fill="rgb(230,182,32)"/><text x="98.4297%" y="367.50">m..</text></g><g><title>sample::Sample::to_sample (4 samples, 0.16%)</title><rect x="99.8417%" y="341" width="0.1583%" height="15" fill="rgb(242,56,43)"/><text x="100.0917%" y="351.50"></text></g></svg></svg>